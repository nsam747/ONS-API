// <auto-generated />
using Acre.Backend.Ons.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Acre.Backend.Ons.Migrations
{
    [DbContext(typeof(OnsDbContext))]
    partial class OnsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6");

            modelBuilder.Entity("Acre.Backend.Ons.Data.Entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Acre.Backend.Ons.Data.Entity.OnsByAge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LowerBoundAge")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubcategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UpperBoundAge")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SubcategoryId");

                    b.HasIndex("UpperBoundAge", "LowerBoundAge");

                    b.ToTable("Ons_By_Age");
                });

            modelBuilder.Entity("Acre.Backend.Ons.Data.Entity.OnsByComposition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AdultCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DependantCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmploymentStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubcategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SubcategoryId");

                    b.HasIndex("EmploymentStatus", "DependantCount", "AdultCount");

                    b.ToTable("Ons_By_Composition");
                });

            modelBuilder.Entity("Acre.Backend.Ons.Data.Entity.OnsByRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("RegionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubcategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("Ons_By_Region");
                });

            modelBuilder.Entity("Acre.Backend.Ons.Data.Entity.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Acre.Backend.Ons.Data.Entity.Subcategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Subcategories");
                });

            modelBuilder.Entity("Acre.Backend.Ons.Data.Entity.OnsByAge", b =>
                {
                    b.HasOne("Acre.Backend.Ons.Data.Entity.Subcategory", "Subcategory")
                        .WithMany("OnsByAge")
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Acre.Backend.Ons.Data.Entity.OnsByComposition", b =>
                {
                    b.HasOne("Acre.Backend.Ons.Data.Entity.Subcategory", "Subcategory")
                        .WithMany("OnsByComposition")
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Acre.Backend.Ons.Data.Entity.OnsByRegion", b =>
                {
                    b.HasOne("Acre.Backend.Ons.Data.Entity.Region", "Region")
                        .WithMany("OnsByRegion")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Acre.Backend.Ons.Data.Entity.Subcategory", "Subcategory")
                        .WithMany("OnsByRegion")
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Acre.Backend.Ons.Data.Entity.Subcategory", b =>
                {
                    b.HasOne("Acre.Backend.Ons.Data.Entity.Category", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
